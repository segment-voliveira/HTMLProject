"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterDeviceModeDestinationsForOptIn = exports.shouldEnableIntegrationHelper = exports.segmentShouldBeDisabled = void 0;
const logger_1 = require("./logger");
const config_helpers_1 = require("./config-helpers");
/**
 * @returns whether or not analytics.js should be completely disabled (never load, or drop cookies)
 */
const segmentShouldBeDisabled = (categories, consentSettings) => {
    if (!consentSettings || consentSettings.hasUnmappedDestinations) {
        return false;
    }
    // disable if _all_ of the the consented categories are irrelevant to segment
    return Object.keys(categories)
        .filter((c) => categories[c])
        .every((c) => !consentSettings.allCategories.includes(c));
};
exports.segmentShouldBeDisabled = segmentShouldBeDisabled;
const isIntegrationCategoryEnabled = (categories, userCategories) => {
    const isMissingCategories = !categories || !categories.length;
    // Enable integration by default if it contains no consent categories data (most likely because consent has not been configured).
    if (isMissingCategories) {
        return true;
    }
    // Enable integration by default if it contains no consent categories data (most likely because consent has not been configured).
    const isEnabled = categories.every((c) => userCategories[c]);
    return isEnabled;
};
const shouldEnableIntegrationHelper = (creationName, cdnSettings, userCategories, filterSettings = {}) => {
    const { integrationCategoryMappings, shouldEnableIntegration } = filterSettings;
    const categories = (integrationCategoryMappings
        ? integrationCategoryMappings[creationName]
        : (0, config_helpers_1.parseConsentCategories)(cdnSettings.integrations[creationName])) ?? [];
    // allow user to customize consent logic if needed
    if (shouldEnableIntegration) {
        return shouldEnableIntegration(categories, userCategories, {
            creationName,
        });
    }
    return isIntegrationCategoryEnabled(categories, userCategories);
};
exports.shouldEnableIntegrationHelper = shouldEnableIntegrationHelper;
/**
 * For opt-in tracking, ensure that device mode destinations that are not consented to are not loaded at all..
 * This means that the destinations are never loaded. By disabling them here,  they can never drop their own cookies or track users.
 * On the downside, it means that the user will not be able to opt-in to these destinations without a page refresh.
 */
const filterDeviceModeDestinationsForOptIn = (cdnSettings, consentedCategories, filterSettings) => {
    const { remotePlugins, integrations } = cdnSettings;
    const { integrationCategoryMappings, shouldEnableIntegration } = filterSettings;
    const cdnSettingsCopy = {
        ...cdnSettings,
        remotePlugins: [...(remotePlugins || [])],
        integrations: { ...integrations },
    };
    const _shouldEnableIntegrationHelper = (creationName) => {
        return (0, exports.shouldEnableIntegrationHelper)(creationName, cdnSettings, consentedCategories, {
            integrationCategoryMappings,
            shouldEnableIntegration,
        });
    };
    for (const creationName in integrations) {
        if (!_shouldEnableIntegrationHelper(creationName)) {
            logger_1.logger.debug(`Disabled (opt-in): ${creationName}`);
            cdnSettingsCopy.remotePlugins = remotePlugins?.filter((p) => p.creationName !== creationName);
            // remove disabled classic destinations and locally-installed action destinations
            delete cdnSettingsCopy.integrations[creationName];
        }
        else {
            logger_1.logger.debug(`Enabled (opt-in): ${creationName}`);
        }
    }
    return cdnSettingsCopy;
};
exports.filterDeviceModeDestinationsForOptIn = filterDeviceModeDestinationsForOptIn;
//# sourceMappingURL=blocking-helpers.js.map