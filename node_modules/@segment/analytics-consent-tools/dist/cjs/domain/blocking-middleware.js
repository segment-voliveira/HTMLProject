"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addBlockingMiddleware = void 0;
const blocking_helpers_1 = require("./blocking-helpers");
const logger_1 = require("./logger");
const config_helpers_1 = require("./config-helpers");
// Block all device mode destinations
const addBlockingMiddleware = (cdnSettingsP, analyticsInstance, filterSettings) => {
    const blockDeviceMode = async ({ integration: creationName, payload, next, }) => {
        const cdnSettings = await cdnSettingsP;
        const eventCategoryPreferences = payload.obj.context.consent.categoryPreferences;
        const disabled = !(0, blocking_helpers_1.shouldEnableIntegrationHelper)(creationName, cdnSettings, eventCategoryPreferences, filterSettings);
        logger_1.logger.debug(`Destination middleware called: ${creationName}`, {
            DROPPED: disabled,
            categoryPreferences: eventCategoryPreferences,
            payload: payload.obj,
            filterSettings,
        });
        if (disabled)
            return null;
        next(payload);
    };
    analyticsInstance.addDestinationMiddleware('*', blockDeviceMode);
    // Block segment itself (Segment.io isn't currently allowed in addDestinationMiddleware)
    const blockSegmentAndEverythingElse = async ({ payload, next, }) => {
        const cdnSettings = await cdnSettingsP;
        const eventCategoryPreferences = payload.obj.context.consent.categoryPreferences;
        const consentSettings = filterSettings.integrationCategoryMappings
            ? {
                hasUnmappedDestinations: false,
                allCategories: (0, config_helpers_1.parseAllCategories)(filterSettings.integrationCategoryMappings),
            }
            : cdnSettings.consentSettings;
        const disabled = (0, blocking_helpers_1.segmentShouldBeDisabled)(eventCategoryPreferences, consentSettings);
        logger_1.logger.debug('Source middleware called', {
            DROPPED: disabled,
            categoryPreferences: eventCategoryPreferences,
            payload: payload.obj,
            filterSettings,
            consentSettings,
        });
        if (disabled)
            return null;
        next(payload);
    };
    analyticsInstance.addSourceMiddleware(blockSegmentAndEverythingElse);
};
exports.addBlockingMiddleware = addBlockingMiddleware;
//# sourceMappingURL=blocking-middleware.js.map