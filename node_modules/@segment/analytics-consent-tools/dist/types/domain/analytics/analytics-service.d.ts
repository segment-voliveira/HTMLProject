import { AnyAnalytics, Categories, CreateWrapperSettings, MaybeInitializedAnalytics } from '../../types';
export type AnalyticsServiceSettings = Pick<CreateWrapperSettings, 'getCategories' | 'pruneUnmappedCategories' | 'integrationCategoryMappings' | 'shouldEnableIntegration'>;
/**
 * This class is a wrapper around the analytics.js library.
 */
export declare class AnalyticsService {
    private settings;
    private cdnSettingsDeferred;
    private ogAnalyticsLoad;
    private get analytics();
    private get cdnSettings();
    private getAllCategories;
    private getCategories;
    private uninitializedAnalytics;
    constructor(analytics: AnyAnalytics, options: AnalyticsServiceSettings);
    /**
     * Allow for gracefully passing a custom disable function (without clobbering the default behavior)
     */
    private createDisableOption;
    loadWithFilteredDeviceModeDestinations(...[settings, options]: Parameters<AnyAnalytics['load']>): Promise<ReturnType<AnyAnalytics['load']>>;
    /**
     * The orignal analytics load function, but also stores the CDN settings on the instance.
     */
    load(...[settings, options]: Parameters<AnyAnalytics['load']>): ReturnType<AnyAnalytics['load']>;
    /**
     * Replace the load fn with a new one
     */
    replaceLoadMethod(loadFn: AnyAnalytics['load']): void;
    page(): void;
    configureBlockingMiddlewareForOptOut(): void;
    configureConsentStampingMiddleware(): void;
    /**
     * Dispatch an event that looks like:
     * ```ts
     * {
     * "type": "track",
     *  "event": "Segment Consent Preference Updated",
     *  "context": {
     *    "consent": {
     *      "categoryPreferences" : {
     *         "C0001": true,
     *         "C0002": false,
     *    }
     *  }
     * ...
     * ```
     */
    consentChange(categories: Categories): void;
}
/**
 * Get possibly-initialized analytics.
 *
 * Reason:
 * There is a known bug for people who attempt to to wrap the library: the analytics reference does not get updated when the analytics.js library loads.
 * Thus, we need to proxy events to the global reference instead.
 *
 * There is a universal fix here: however, many users may not have updated it:
 * https://github.com/segmentio/snippet/commit/081faba8abab0b2c3ec840b685c4ff6d6cccf79c
 */
export declare const getInitializedAnalytics: (analytics: AnyAnalytics) => MaybeInitializedAnalytics;
//# sourceMappingURL=analytics-service.d.ts.map