import { CreateWrapperSettings } from '../types';
import { AnalyticsConsentError } from '../types/errors';
/**
 * Thrown when a load should be cancelled.
 */
export declare class AbortLoadError extends AnalyticsConsentError {
    loadSegmentNormally: boolean;
    constructor(loadSegmentNormally: boolean);
}
export interface AbortLoadOptions {
    /**
     * Whether or not to disable the consent requirement that is normally enforced by the wrapper.
     * If true -- load segment normally.
     */
    loadSegmentNormally: boolean;
}
export declare class LoadToken {
    options: LoadOptions;
    constructor(options: LoadOptions);
}
export type ConsentModel = 'opt-in' | 'opt-out';
interface LoadOptions {
    consentModel: ConsentModel;
}
export declare class LoadContext {
    isAbortCalled: boolean;
    isLoadCalled: boolean;
    abortLoadOptions: AbortLoadOptions;
    loadOptions: LoadOptions;
    /**
     * Allow analytics.js to be initialized with the consent wrapper.
     * Note: load just means 'allowed to load' -- we still wait for analytics.load to be explicitly called.
     */
    load(options: LoadOptions): void;
    /**
     * Abort the _consent-wrapped_ analytics.js initialization
     */
    abort(options?: AbortLoadOptions): void;
    validate(): void;
}
/**
 * Wrapper for shouldLoadSegment fn
 */
export declare const normalizeShouldLoadSegment: (shouldLoadSegment: CreateWrapperSettings['shouldLoadSegment']) => () => Promise<LoadContext>;
export {};
//# sourceMappingURL=load-context.d.ts.map